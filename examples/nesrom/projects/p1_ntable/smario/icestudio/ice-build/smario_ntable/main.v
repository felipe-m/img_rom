// Code generated by Icestudio 0.7.1w202108280708

`default_nettype none

//---- Top entity
module main (
 input va90334,
 input v2cb7a3,
 output v4e6402,
 output [1:0] v8514bc,
 output v712bbf,
 output [1:0] v2cf531,
 output [1:0] v62c682
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire [0:9] w5;
 wire [0:9] w6;
 wire [0:4] w7;
 wire [0:4] w8;
 wire [0:7] w9;
 wire w10;
 wire w11;
 wire [0:1] w12;
 wire [0:1] w13;
 wire [0:1] w14;
 assign w1 = v2cb7a3;
 assign w2 = va90334;
 assign v4e6402 = w3;
 assign v712bbf = w4;
 assign v8514bc = w12;
 assign v2cf531 = w13;
 assign v62c682 = w14;
 vd8d107 v820333 (
  .vc82b22(w0),
  .va8051c(w1)
 );
 vec49d1 v2c74e1 (
  .v7aec70(w0),
  .v12e5c2(w2),
  .v7688c4(w3),
  .v7af556(w4),
  .vb50967(w5),
  .v9459b8(w6),
  .v27278a(w10)
 );
 v82cebd v06ec4a (
  .v117158(w5),
  .v4b5b17(w6),
  .v822d73(w7),
  .vca1728(w8),
  .v7df241(w11)
 );
 v3ff344 v26fb46 (
  .v6a586c(w7),
  .v86d61f(w8),
  .v237199(w9)
 );
 vc8e043 v594e75 (
  .va264a3(w9),
  .v5074f5(w10),
  .v7c7bf8(w11),
  .va48225(w12),
  .v0d0802(w13),
  .v1ad6a6(w14)
 );
endmodule

/*-------------------------------------------------*/
/*--   */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- 
/*-------------------------------------------------*/
//---- Top entity
module vd8d107 (
 input va8051c,
 output vc82b22
);
 wire w0;
 wire w1;
 assign w0 = va8051c;
 assign vc82b22 = w1;
 vd8d107_v3ead23 v3ead23 (
  .clk_brd(w0),
  .clk50mhz(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- pll12to50mhz  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Generates a 50MHz clock from a 12MHz clock
/*-------------------------------------------------*/

module vd8d107_v3ead23 (
 input clk_brd,
 output clk50mhz
);
   // Generates a 50 MHz clock from a 12MHz clock
    SB_PLL40_CORE
             #(.FEEDBACK_PATH("SIMPLE"),
                 .PLLOUT_SELECT("GENCLK"),
                 .DIVR(4'd5),
                 .DIVF(6'd49),
                 .DIVQ(3'd1),
                 .FILTER_RANGE(3'b001)
             )
             uut
             (
                 .REFERENCECLK(clk_brd),
                 .PLLOUTCORE(clk50mhz),
                 .RESETB(1'b1),
                 .BYPASS(1'b0)
              );
endmodule
//---- Top entity
module vec49d1 (
 input v12e5c2,
 input v7aec70,
 output v27278a,
 output v7688c4,
 output v7af556,
 output [9:0] v9459b8,
 output [9:0] vb50967
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire [0:9] w4;
 wire [0:9] w5;
 wire w6;
 assign w0 = v12e5c2;
 assign v27278a = w1;
 assign v7688c4 = w2;
 assign v7af556 = w3;
 assign v9459b8 = w4;
 assign vb50967 = w5;
 assign w6 = v7aec70;
 vec49d1_v9a5c44 v9a5c44 (
  .rst(w0),
  .visible(w1),
  .hsinc(w2),
  .vsinc(w3),
  .col(w4),
  .fila(w5),
  .clk50mhz(w6)
 );
endmodule

/*-------------------------------------------------*/
/*-- VGA SYNC  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Generate synchronization signals for VGA 640x480 at clk 50MHz
/*-------------------------------------------------*/

module vec49d1_v9a5c44 (
 input rst,
 input clk50mhz,
 output visible,
 output hsinc,
 output vsinc,
 output [9:0] col,
 output [9:0] fila
);
 // @include vga_sync_50mhz.v
 
    vga_sync i_vga 
    (
      .rst     (rst),
      .clk     (clk50mhz),
      .visible (visible),
      //.new_pxl (new_pxl),
      .hsync   (hsinc),
      .vsync   (vsinc),
      .col     (col),
      .row     (fila)
   );
 
endmodule
//---- Top entity
module v82cebd (
 input [9:0] v117158,
 input [9:0] v4b5b17,
 output [4:0] v822d73,
 output [4:0] vca1728,
 output [2:0] v24d12d,
 output [2:0] v5467e1,
 output v7df241
);
 wire [0:9] w0;
 wire [0:9] w1;
 wire [0:4] w2;
 wire [0:4] w3;
 wire [0:2] w4;
 wire [0:2] w5;
 wire w6;
 assign w0 = v117158;
 assign w1 = v4b5b17;
 assign v822d73 = w2;
 assign vca1728 = w3;
 assign v24d12d = w4;
 assign v5467e1 = w5;
 assign v7df241 = w6;
 v82cebd_v5874e0 v5874e0 (
  .fila(w0),
  .col(w1),
  .fila_cuad(w2),
  .col_cuad(w3),
  .fila_in(w4),
  .col_in(w5),
  .col9(w6)
 );
endmodule

/*-------------------------------------------------*/
/*-- grid_signals  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- generation of grid signals
/*-------------------------------------------------*/

module v82cebd_v5874e0 (
 input [9:0] fila,
 input [9:0] col,
 output [4:0] fila_cuad,
 output [4:0] col_cuad,
 output [2:0] fila_in,
 output [2:0] col_in,
 output col9
);
 // Generate grid signals
 
 assign col_cuad = col[8:4];
 assign fila_cuad = fila[8:4];
 
 // useful to know when we are over column 511
 assign col9 = col[9];
 assign fila_in = fila[3:1];
 assign col_in = col[3:1];
endmodule
//---- Top entity
module v3ff344 (
 input [4:0] v6a586c,
 input [4:0] v86d61f,
 output [7:0] v237199
);
 wire [0:7] w0;
 wire [0:4] w1;
 wire [0:4] w2;
 assign v237199 = w0;
 assign w1 = v6a586c;
 assign w2 = v86d61f;
 v3ff344_v5874e0 v5874e0 (
  .num_patron(w0),
  .fila_cuad(w1),
  .col_cuad(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- NameTable SMario sports  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Name Table of a SuperMario screen, input ports are split in grid col & row
/*-------------------------------------------------*/

module v3ff344_v5874e0 (
 input [4:0] fila_cuad,
 input [4:0] col_cuad,
 output [7:0] num_patron
);
 // @include smario_traspas_nt_nt0.v
 
 wire [9:0] dir_ntable;
 
 assign dir_ntable = {fila_cuad, col_cuad};
 
 ROM_NTABLE_SMARIO_TRASPAS NTABLE
 (
   .addr(dir_ntable),
   .dout(num_patron)
 );
endmodule
//---- Top entity
module vc8e043 (
 input [7:0] va264a3,
 input v7c7bf8,
 input v5074f5,
 output [1:0] va48225,
 output [1:0] v0d0802,
 output [1:0] v1ad6a6
);
 wire [0:7] w0;
 wire w1;
 wire w2;
 wire [0:1] w3;
 wire [0:1] w4;
 wire [0:1] w5;
 assign w0 = va264a3;
 assign w1 = v7c7bf8;
 assign w2 = v5074f5;
 assign va48225 = w3;
 assign v0d0802 = w4;
 assign v1ad6a6 = w5;
 vc8e043_v5874e0 v5874e0 (
  .num_patron(w0),
  .col9(w1),
  .visible(w2),
  .red(w3),
  .green(w4),
  .blue(w5)
 );
endmodule

/*-------------------------------------------------*/
/*-- Name Table Pixel generator  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Pixel generation with just the NameTable 
/*-------------------------------------------------*/

module vc8e043_v5874e0 (
 input [7:0] num_patron,
 input col9,
 input visible,
 output [1:0] red,
 output [1:0] green,
 output [1:0] blue
);
  reg [1:0] rojo, verde, azul;
  assign red = rojo;
  assign green = verde;
  assign blue = azul;
  
  always @(*)
   begin
     rojo   = 2'b00;
     verde  = 2'b00;
     azul   = 2'b00;
     if (visible) begin
       if (col9 == 1'b0) begin  // less than 512
         rojo  = ~num_patron [7:6];
         //verde = ~num_patron [7:6];
         verde = num_patron [5:4]; //instead of num_patron [7:6], to have more colors
         //azul  = ~num_patron [7:6];
         azul  = num_patron [3:2]; //instead of num_patron [7:6], to have more colors
       end
     end
   end
endmodule
